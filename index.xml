<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Art of Computer Systems on</title><link>/</link><description>Recent content in Art of Computer Systems on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 03 Mar 2025 06:33:22 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Value Categories in Modern C++</title><link>/posts/cpp-value-categories/</link><pubDate>Mon, 03 Mar 2025 06:33:22 +0800</pubDate><guid>/posts/cpp-value-categories/</guid><description>&lt;h2 id="introduction" class="heading">Introduction&lt;a href="#introduction" aria-labelledby="introduction">
&lt;!-- &lt;i class="fas fa-link anchor">&lt;/i> -->
 &lt;svg class="svg-inline--fa fas fa-link anchor" fill="currentColor" aria-hidden="true" role="img" viewBox="0 0 640 512">&lt;use href="#fas-link">&lt;/use>&lt;/svg>&amp;nbsp;
 &lt;/a>
&lt;/h2>
&lt;p>Value categories in C++ are fundamental concepts that classify expressions based on their properties. Understanding value categories is essential and crucial for modern C++ programming, especially when working with performance optimization through move semantics and perfect forwarding.&lt;/p>



&lt;h2 id="understanding-value-categories" class="heading">Understanding Value Categories&lt;a href="#understanding-value-categories" aria-labelledby="understanding-value-categories">
&lt;!-- &lt;i class="fas fa-link anchor">&lt;/i> -->
 &lt;svg class="svg-inline--fa fas fa-link anchor" fill="currentColor" aria-hidden="true" role="img" viewBox="0 0 640 512">&lt;use href="#fas-link">&lt;/use>&lt;/svg>&amp;nbsp;
 &lt;/a>
&lt;/h2>



&lt;h3 id="basic-concepts" class="heading">Basic Concepts&lt;a href="#basic-concepts" aria-labelledby="basic-concepts">
&lt;!-- &lt;i class="fas fa-link anchor">&lt;/i> -->
 &lt;svg class="svg-inline--fa fas fa-link anchor" fill="currentColor" aria-hidden="true" role="img" viewBox="0 0 640 512">&lt;use href="#fas-link">&lt;/use>&lt;/svg>&amp;nbsp;
 &lt;/a>
&lt;/h3>
&lt;p>Prior to modern C++, the values of expression can be roughly categories into &lt;code>lvalue&lt;/code> and &lt;code>rvalue&lt;/code> by the relative position of value to the assignment operator. Lvalue appears on the left side of assignment while Rvalue is on the right end.&lt;/p></description></item><item><title>Git Cheatsheet</title><link>/tutorials/git/cheatsheet/cheatsheet/</link><pubDate>Fri, 16 Dec 2022 17:42:23 +0800</pubDate><guid>/tutorials/git/cheatsheet/cheatsheet/</guid><description>&lt;h2 id="introduction" class="heading">Introduction&lt;a href="#introduction" aria-labelledby="introduction">
&lt;!-- &lt;i class="fas fa-link anchor">&lt;/i> -->
 &lt;svg class="svg-inline--fa fas fa-link anchor" fill="currentColor" aria-hidden="true" role="img" viewBox="0 0 640 512">&lt;use href="#fas-link">&lt;/use>&lt;/svg>&amp;nbsp;
 &lt;/a>
&lt;/h2>
&lt;p>I record some useful tips and skills on working with git.&lt;/p>



&lt;h2 id="submodule" class="heading">Submodule&lt;a href="#submodule" aria-labelledby="submodule">
&lt;!-- &lt;i class="fas fa-link anchor">&lt;/i> -->
 &lt;svg class="svg-inline--fa fas fa-link anchor" fill="currentColor" aria-hidden="true" role="img" viewBox="0 0 640 512">&lt;use href="#fas-link">&lt;/use>&lt;/svg>&amp;nbsp;
 &lt;/a>
&lt;/h2>



&lt;h3 id="how-to-prevent-it-switching-to-a-detached-head-on-updating-the-submodule" class="heading">How to prevent it switching to a detached HEAD on updating the submodule&lt;a href="#how-to-prevent-it-switching-to-a-detached-head-on-updating-the-submodule" aria-labelledby="how-to-prevent-it-switching-to-a-detached-head-on-updating-the-submodule">
&lt;!-- &lt;i class="fas fa-link anchor">&lt;/i> -->
 &lt;svg class="svg-inline--fa fas fa-link anchor" fill="currentColor" aria-hidden="true" role="img" viewBox="0 0 640 512">&lt;use href="#fas-link">&lt;/use>&lt;/svg>&amp;nbsp;
 &lt;/a>
&lt;/h3>
&lt;p>It can be fixed by setting the remote tracking branch with &lt;code>git submodule set-branch -b &amp;lt;branch name&amp;gt; &amp;lt;submodule path&amp;gt;&lt;/code>. The &lt;code>&amp;lt;branch&amp;gt;&lt;/code> name should not contain the remote repo alias. E.g., the
command of &lt;code>git submodule set-branch -d main vim&lt;/code> will make the submodule &lt;code>vim&lt;/code> track the changes of remote &lt;code>main&lt;/code> branch.&lt;/p></description></item><item><title>About Me</title><link>/about/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>/about/</guid><description>&lt;p>
 








 

&lt;a href="https://github.com/hftsin">https://github.com/hftsin&lt;/a>&lt;/p></description></item></channel></rss>